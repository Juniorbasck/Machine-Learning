# -*- coding: utf-8 -*-
"""[ADILSON JUNIOR]ativiadeSentiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RmnuqIx2EUNJNNnRaiLkQf5iX-H87EfQ

baixando pysentimiento bliblioteca
"""

pip install pysentimiento

"""Importando uma função para criar um analisador de sentimentos."""

from pysentimiento import create_analyzer

"""# Criando um modelo de análise de sentimentos em português."""

modelo_analise_sentimento = create_analyzer(task='sentiment', lang='pt')

"""# Esse código faz a previsão do sentimento da frase, identificando se o texto é positivo, negativo ou neutro.

"""

modelo_analise_sentimento.predict('''
A fritadeira é sensacional, muito além do que imaginava. É linda, super funcional e muito fácil de manusear. Fácil de limpar e potente. Super recomendo.
''')

"""## O código faz a previsão do sentimento dessa frase, que provavelmente será uma mistura de sentimentos negativos (pela oxidação) e neutros/positivos (pelo cumprimento da função do produto).

"""

modelo_analise_sentimento.predict('''
Após poucos meses de uso a carcaça de aço escovado começou a oxidar,
demonstrando a baixa qualidade de proteção. Fora esse detalhe, o produto cumpre o prometido.
''')

"""## Esse código importa a biblioteca pandas e lê um arquivo CSV chamado resenhas.csv. O conteúdo do arquivo é carregado em um DataFrame chamado dados e, em seguida, o DataFrame é exibido.

"""

import pandas as pd
dados = pd.read_csv('/content/resenhas.csv')
dados

"""Esse código aplica o modelo de análise de sentimentos à coluna "Resenha" do DataFrame dados. Ele faz previsões sobre o sentimento de cada resenha e armazena os resultados em resultado_previsao. Em seguida, exibe essas previsões."""

resultado_previsao = modelo_analise_sentimento.predict(dados['Resenha'])
resultado_previsao

"""Esse código cria uma lista chamada sentimento e, para cada resultado de previsão de sentimento, adiciona o valor do campo output (que contém o sentimento previsto, como "positivo", "negativo" ou "neutro") à lista. No final, a lista sentimento é exibida."""

sentimento = []
for resultado in resultado_previsao:
    sentimento.append(resultado.output)
sentimento

"""Esse código cria uma nova coluna chamada "Sentimento" no DataFrame dados e atribui os valores da lista sentimento a essa coluna. Depois, exibe o DataFrame atualizado com a nova coluna.







"""

dados['Sentimento'] = sentimento
dados

"""Esse código agrupa os dados pela coluna "Sentimento", conta quantas vezes cada sentimento aparece e cria um novo DataFrame df_sentimento com as contagens. O método reset_index() redefine o índice, e a coluna "Contagem" é adicionada para mostrar o número de ocorrências de cada sentimento. O head() exibe as primeiras linhas desse DataFrame.







"""

df_sentimento = dados.groupby('Sentimento').value_counts().reset_index(name='Contagem')
df_sentimento.head()

"""Esse código usa o Plotly Express para criar um gráfico de barras. Ele plota a contagem de resenhas por sentimento, usando o DataFrame df_sentimento. O eixo x é a coluna Sentimento, e o eixo y é a coluna Contagem. O título do gráfico é "Contagem de Resenhas por Sentimento", e fig.show() exibe o gráfico gerado.







"""

import plotly.express as px
fig = px.bar(df_sentimento, x='Sentimento', y='Contagem',
             title='Contagem de Resenhas por Sentimento')
fig.show()

"""Esse código importa a biblioteca nltk e, em seguida, carrega o conjunto de stopwords (palavras comuns como "a", "de", "o", que geralmente são ignoradas em análises de texto) da biblioteca nltk.corpus.







"""

import nltk
from nltk.corpus import stopwords

"""Esse código faz o download das stopwords em português usando o nltk e as armazena em um conjunto chamado portuguese_stopwords. Essas palavras serão usadas para remover palavras irrelevantes de textos durante a análise.







"""

# Carregar stopwords em português
nltk.download('stopwords')
portuguese_stopwords = set(stopwords.words('portuguese'))

"""Esse código importa a classe WordCloud da biblioteca wordcloud, que é usada para gerar nuvens de palavras, e também importa o matplotlib.pyplot para exibir o gráfico gerado pela nuvem de palavras.







"""

from wordcloud import WordCloud
import matplotlib.pyplot as plt

"""A função nuvem_palavras filtra as resenhas por sentimento, remove as stopwords e gera uma nuvem de palavras com as palavras mais frequentes, exibindo-a em um gráfico.







"""

def nuvem_palavras(texto, coluna_texto, sentimento):
    # Filtrando as resenhas com base no sentimento especificado
    texto_sentimento = texto.query(f"Sentimento == '{sentimento}'")[coluna_texto]

    # Unindo todas as resenhas em uma única string
    texto_unido = " ".join(texto_sentimento)

    # Dividindo o texto em palavras e filtrando com stopwords
    palavras = texto_unido.split()
    palavras_filtradas = [palavra for palavra in palavras if palavra not in portuguese_stopwords]
    texto_filtrado = " ".join(palavras_filtradas)

    # Criando e exibindo a nuvem de palavras
    nuvem_palavras = WordCloud(width=800, height=500, max_words=50).generate(texto_filtrado)
    plt.figure(figsize=(10, 7))
    plt.imshow(nuvem_palavras, interpolation='bilinear')
    plt.axis('off')
    plt.show()

"""Esse código chama a função nuvem_palavras, gerando e exibindo a nuvem de palavras para as resenhas com sentimento POS (positivo), usando a coluna 'Resenha' do DataFrame dados.







"""

nuvem_palavras(dados, 'Resenha', 'POS')

"""Esse código chama a função nuvem_palavras, gerando e exibindo a nuvem de palavras para as resenhas com sentimento NEG (negativo), usando a coluna 'Resenha' do DataFrame dados.







"""

nuvem_palavras(dados, 'Resenha', 'NEG')